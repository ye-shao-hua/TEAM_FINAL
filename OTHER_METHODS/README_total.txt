除了在上级目录中的神经网络预测方法（NETWORK文件夹），我们的其他求解方法尝试，我们共尝试了base法，quadtree法，finite_difference法和fem_new法。其中提供了多种不同的思路以供参考。


quadtree方法：
在解决空间问题时会听到八叉树数据结构，而对应的二维空间，则可以使用四叉树去表示。
四叉树数据结构可以实现非均匀网格细分功能。每一个结点会持有一个矩形区域，如果要将此区域细分，则该结点会包含四个子结点，直到叶子结点为止。然后依据差分法，以待求单元周围数个单元的的一定加权和作为该单元的结果，并不断迭代至于最后成功求解稳定场方程。相较传统的差分法由于不需要均匀细化网格，使得大量资源得以被充分利用。

finite_defference方法：
在最基础的有限差分法上的改进，该方法在算法设计上考虑了计算机的缓存机制，和并行数据特征，提供了一个较明显的性能提升思路。
使用quadtree方法时，树结构是链式的，内存分布在不同的物理地址中，内存寻址所消耗的时间实际上大大降低了程序的执行效率。如果将数据使用内存连续的数组进行存储，并且使用“单指令多数据”指令集（MMX，SSE，AVX）指令集进行数据的批量操作，最后使用openmp框架进行多处理器的并行计算，可以对原始的程序达到十倍以上的速度提升。代码中提供了如上的数据并行操作的代码实现。

base方法：
我们尝试在经典的有限元方法中， 改进网格存储的信息，以此达到在网格没有细分很多次的情况下，仍能做到对数值变化剧烈的场景下仍能做到较好的表示效果。
经典的有限元方法，是在网格中存储一个标量，然后认为一个网格中的所有位子都是该值，或者获取相邻的网格所存储的值，然后做线性差分。这么做的坏处是，在数值变化剧烈的情况下，网格需要足够细分才能将网格中的每个位子的值都近似为同一个值，否则，将会引入不容忽略的误差。但是如果我们将网格设计成可以存储一个多项式函数而不是一个标量，则可以凭借不同的多项式系数拟合不同的形函数，并且我们并没有像一般的多项式拟合算法一样硬编码为二次拟合或三次拟合，而是可以根据精度需求，动态的设置多项式的阶数，这个功能用名为FE_Q的模块实现。为了解决非矩形划分问题，我们采用空间映射和流形方法，配合雅可比矩阵，将原本结点持有的矩形区域映射为梯形甚至扇形区域。这样的设计，可以让程序在算法中无需考虑空间的实际形状，而是对空间的虚拟形状进行算法计算，然后在计算结果时再映射会实际形状，达到逻辑和功能的隔离。

fem_new方法：
相较于base方法，使用了三角形网格进行划分，可以更加贴切特殊形状的求解区域，得以实现在更少的区域划分情况下，得到更加精确的解，减少计算资源使用。同时，使用高斯求积公式对积分进行简化，进一步优化了计算速率，可以快速准确对问题进行求解。使用eigen3库对矩阵计算进行优化，大大增加了有限元方法的计算效率，使之更具可行性。是目前最有潜力的方案之一。
